digraph Q {

node [shape = box];
compound = true;

    a1 [label = "delete(BTree, element)"]
    a1 -> a2
    a2 [label = "isEmpty(BTree)" shape = diamond]
    a2-> b2 [label = "YES"]
    b2 [label = "return empty list"]
    a2 -> a3 [label = "NO"]
    a3 [label = "element < BTree.element" shape = diamond]
    a3 -> smaller [label = "YES"]
    a3 -> a4 [label = "NO"]
    a4 [label = "element > BTree.element" shape = diamond]
    a4 -> larger [label = "YES"]
    a4 -> hilfs [label = "NO (Element == BTree .Element)"]
    hilfs [label = "suche und lösche das größte Element\nim linken Baum aus dem linken Baum,\n welches dann zu Btree.element wird\n (siehe findAndDelete())"]
    hilfs -> a10
    a10 [label = "Btree.element wird zu gefundenem\nMax-Element aus BTree.left"]
    a10 -> a11
    a11 [label = "Btree.left wird zum Baum\nohne das größte Element"]
    a11 -> hohe
    hohe [label = "height =
     max(height_left,
      height_right) + 1?"]

    smaller [label = "Delete(BTree, left)"] smaller -> hohe
    larger [label = "Delete(BTree, right)"] larger -> hohe
}

